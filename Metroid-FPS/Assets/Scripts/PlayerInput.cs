//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Input/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""e9f7bcb3-6460-4a70-915d-3bcd117d56cc"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""c00df762-ccc9-4db4-a577-0620ac519c49"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""15a26a4c-7a0f-4048-84cf-1fb6d4729188"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Fire"",
                    ""type"": ""Button"",
                    ""id"": ""82befa69-c927-48c3-9147-92c64065b58b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""314664e3-cb69-42d9-9782-081f2e32e878"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dash"",
                    ""type"": ""Button"",
                    ""id"": ""b395ced7-9f7d-439b-9764-c26974699811"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ChargeStart"",
                    ""type"": ""Button"",
                    ""id"": ""3db6733d-5af4-4349-9d93-7ab6857ff2e3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ChargeEnd"",
                    ""type"": ""Button"",
                    ""id"": ""9a85a391-226f-490d-a830-66c12742cc28"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""FireMissile"",
                    ""type"": ""Button"",
                    ""id"": ""51c0e686-12e2-49a9-8154-3b6de9a553df"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwapBeamPower"",
                    ""type"": ""Button"",
                    ""id"": ""795fa8ed-482a-492b-9397-b2f69b3c4a0f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwapBeamWave"",
                    ""type"": ""Button"",
                    ""id"": ""6a8028f3-2171-4877-9cea-2ac483bd1d62"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwapBeamIce"",
                    ""type"": ""Button"",
                    ""id"": ""1410dd73-f4a4-4d06-9e5b-856762947d5e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwapBeamPlasma"",
                    ""type"": ""Button"",
                    ""id"": ""bce6bec2-c65c-438d-8668-6a1b7593cc18"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ToggleFullScreen"",
                    ""type"": ""Button"",
                    ""id"": ""a33683ac-e253-47af-9137-2ea98b6ab926"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""978bfe49-cc26-4a3d-ab7b-7d7a29327403"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c1f7a91b-d0fd-4a62-997e-7fb9b69bf235"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""143bb1cd-cc10-4eca-a2f0-a3664166fe91"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""977b5c15-12e1-4395-9336-067876c4c8f5"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bb4fa825-02f4-4ec7-a14b-a770d4fd931b"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8e9c0cfd-cd84-4da2-b9f5-df5a7460c313"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": ""Hold(pressPoint=0.9)"",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""ChargeStart"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7bdaddbe-fe1d-4312-af09-f82f1c1997b1"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": ""Press(pressPoint=0.1,behavior=1)"",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""ChargeEnd"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""64e3011d-d245-4459-bc83-228c8350f665"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""FireMissile"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8a1df811-d8cd-467a-aac9-7a65949e5330"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""SwapBeamPower"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d2a84fab-136d-4886-9930-7f280838460d"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""SwapBeamWave"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""12bf846e-e71f-4eed-9280-098a8e339cd3"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""SwapBeamIce"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""179e41c3-2765-466d-99e3-b2d9b6e76c9f"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""SwapBeamPlasma"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0cc4f4ae-ff73-456d-820d-a4c4f2fb0752"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleFullScreen"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Move = m_Player.FindAction("Move", throwIfNotFound: true);
        m_Player_Look = m_Player.FindAction("Look", throwIfNotFound: true);
        m_Player_Fire = m_Player.FindAction("Fire", throwIfNotFound: true);
        m_Player_Jump = m_Player.FindAction("Jump", throwIfNotFound: true);
        m_Player_Dash = m_Player.FindAction("Dash", throwIfNotFound: true);
        m_Player_ChargeStart = m_Player.FindAction("ChargeStart", throwIfNotFound: true);
        m_Player_ChargeEnd = m_Player.FindAction("ChargeEnd", throwIfNotFound: true);
        m_Player_FireMissile = m_Player.FindAction("FireMissile", throwIfNotFound: true);
        m_Player_SwapBeamPower = m_Player.FindAction("SwapBeamPower", throwIfNotFound: true);
        m_Player_SwapBeamWave = m_Player.FindAction("SwapBeamWave", throwIfNotFound: true);
        m_Player_SwapBeamIce = m_Player.FindAction("SwapBeamIce", throwIfNotFound: true);
        m_Player_SwapBeamPlasma = m_Player.FindAction("SwapBeamPlasma", throwIfNotFound: true);
        m_Player_ToggleFullScreen = m_Player.FindAction("ToggleFullScreen", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_Player_Move;
    private readonly InputAction m_Player_Look;
    private readonly InputAction m_Player_Fire;
    private readonly InputAction m_Player_Jump;
    private readonly InputAction m_Player_Dash;
    private readonly InputAction m_Player_ChargeStart;
    private readonly InputAction m_Player_ChargeEnd;
    private readonly InputAction m_Player_FireMissile;
    private readonly InputAction m_Player_SwapBeamPower;
    private readonly InputAction m_Player_SwapBeamWave;
    private readonly InputAction m_Player_SwapBeamIce;
    private readonly InputAction m_Player_SwapBeamPlasma;
    private readonly InputAction m_Player_ToggleFullScreen;
    public struct PlayerActions
    {
        private @PlayerInput m_Wrapper;
        public PlayerActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Player_Move;
        public InputAction @Look => m_Wrapper.m_Player_Look;
        public InputAction @Fire => m_Wrapper.m_Player_Fire;
        public InputAction @Jump => m_Wrapper.m_Player_Jump;
        public InputAction @Dash => m_Wrapper.m_Player_Dash;
        public InputAction @ChargeStart => m_Wrapper.m_Player_ChargeStart;
        public InputAction @ChargeEnd => m_Wrapper.m_Player_ChargeEnd;
        public InputAction @FireMissile => m_Wrapper.m_Player_FireMissile;
        public InputAction @SwapBeamPower => m_Wrapper.m_Player_SwapBeamPower;
        public InputAction @SwapBeamWave => m_Wrapper.m_Player_SwapBeamWave;
        public InputAction @SwapBeamIce => m_Wrapper.m_Player_SwapBeamIce;
        public InputAction @SwapBeamPlasma => m_Wrapper.m_Player_SwapBeamPlasma;
        public InputAction @ToggleFullScreen => m_Wrapper.m_Player_ToggleFullScreen;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove;
                @Look.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLook;
                @Look.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLook;
                @Look.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLook;
                @Fire.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnFire;
                @Fire.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnFire;
                @Fire.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnFire;
                @Jump.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnJump;
                @Dash.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnDash;
                @Dash.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnDash;
                @Dash.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnDash;
                @ChargeStart.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnChargeStart;
                @ChargeStart.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnChargeStart;
                @ChargeStart.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnChargeStart;
                @ChargeEnd.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnChargeEnd;
                @ChargeEnd.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnChargeEnd;
                @ChargeEnd.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnChargeEnd;
                @FireMissile.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnFireMissile;
                @FireMissile.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnFireMissile;
                @FireMissile.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnFireMissile;
                @SwapBeamPower.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSwapBeamPower;
                @SwapBeamPower.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSwapBeamPower;
                @SwapBeamPower.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSwapBeamPower;
                @SwapBeamWave.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSwapBeamWave;
                @SwapBeamWave.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSwapBeamWave;
                @SwapBeamWave.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSwapBeamWave;
                @SwapBeamIce.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSwapBeamIce;
                @SwapBeamIce.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSwapBeamIce;
                @SwapBeamIce.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSwapBeamIce;
                @SwapBeamPlasma.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSwapBeamPlasma;
                @SwapBeamPlasma.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSwapBeamPlasma;
                @SwapBeamPlasma.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSwapBeamPlasma;
                @ToggleFullScreen.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnToggleFullScreen;
                @ToggleFullScreen.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnToggleFullScreen;
                @ToggleFullScreen.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnToggleFullScreen;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
                @Fire.started += instance.OnFire;
                @Fire.performed += instance.OnFire;
                @Fire.canceled += instance.OnFire;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Dash.started += instance.OnDash;
                @Dash.performed += instance.OnDash;
                @Dash.canceled += instance.OnDash;
                @ChargeStart.started += instance.OnChargeStart;
                @ChargeStart.performed += instance.OnChargeStart;
                @ChargeStart.canceled += instance.OnChargeStart;
                @ChargeEnd.started += instance.OnChargeEnd;
                @ChargeEnd.performed += instance.OnChargeEnd;
                @ChargeEnd.canceled += instance.OnChargeEnd;
                @FireMissile.started += instance.OnFireMissile;
                @FireMissile.performed += instance.OnFireMissile;
                @FireMissile.canceled += instance.OnFireMissile;
                @SwapBeamPower.started += instance.OnSwapBeamPower;
                @SwapBeamPower.performed += instance.OnSwapBeamPower;
                @SwapBeamPower.canceled += instance.OnSwapBeamPower;
                @SwapBeamWave.started += instance.OnSwapBeamWave;
                @SwapBeamWave.performed += instance.OnSwapBeamWave;
                @SwapBeamWave.canceled += instance.OnSwapBeamWave;
                @SwapBeamIce.started += instance.OnSwapBeamIce;
                @SwapBeamIce.performed += instance.OnSwapBeamIce;
                @SwapBeamIce.canceled += instance.OnSwapBeamIce;
                @SwapBeamPlasma.started += instance.OnSwapBeamPlasma;
                @SwapBeamPlasma.performed += instance.OnSwapBeamPlasma;
                @SwapBeamPlasma.canceled += instance.OnSwapBeamPlasma;
                @ToggleFullScreen.started += instance.OnToggleFullScreen;
                @ToggleFullScreen.performed += instance.OnToggleFullScreen;
                @ToggleFullScreen.canceled += instance.OnToggleFullScreen;
            }
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    public interface IPlayerActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnFire(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnDash(InputAction.CallbackContext context);
        void OnChargeStart(InputAction.CallbackContext context);
        void OnChargeEnd(InputAction.CallbackContext context);
        void OnFireMissile(InputAction.CallbackContext context);
        void OnSwapBeamPower(InputAction.CallbackContext context);
        void OnSwapBeamWave(InputAction.CallbackContext context);
        void OnSwapBeamIce(InputAction.CallbackContext context);
        void OnSwapBeamPlasma(InputAction.CallbackContext context);
        void OnToggleFullScreen(InputAction.CallbackContext context);
    }
}
